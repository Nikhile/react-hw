[{"D:\\react-project\\new-react-project\\src\\index.js":"1","D:\\react-project\\new-react-project\\src\\App.js":"2","D:\\react-project\\new-react-project\\src\\reportWebVitals.js":"3","D:\\react-project\\new-react-project\\src\\mockData\\mockCustomerData.js":"4"},{"size":500,"mtime":1609533391108,"results":"5","hashOfConfig":"6"},{"size":5503,"mtime":1626913657107,"results":"7","hashOfConfig":"6"},{"size":362,"mtime":499162500000,"results":"8","hashOfConfig":"6"},{"size":3027,"mtime":1626884181329,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"l6q23i",{"filePath":"13","messages":"14","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"15","usedDeprecatedRules":"12"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20"},"D:\\react-project\\new-react-project\\src\\index.js",[],["21","22"],"D:\\react-project\\new-react-project\\src\\App.js",["23"],"import React, { useState, useEffect } from \"react\";\nimport fetch from './mockData/mockCustomerData';\nimport { useTable } from 'react-table'\nimport \"./App.css\";\nimport _ from 'lodash';\n\nfunction calculateRewardPoints(customerData) {\n  const months = [\n    \"Jan\", \"Feb\", \"Mar\", \"Apr\", \n    \"May\", \"Jun\", \"Jul\", \"Aug\", \n    \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\n  const transactionPoints = customerData.map(transaction => {\n    let points = 0;\n    let over100 = transaction.amountSpent - 100;\n\n    if (over100 > 0) {\n      points += (over100 * 2);\n    }\n\n    if (transaction.amountSpent > 50) {\n      points += 50;\n    }\n\n    const month = new Date(transaction.transctionDate).getMonth();\n    return { ...transaction, points, month };\n  });\n\n  let byCustomer = {};\n  let totalPointsByCustomer = {};\n\n  transactionPoints.forEach(transactionPoints => {\n    let { customerId, customerName, month, points } = transactionPoints;\n\n    if (!byCustomer[customerId]) {\n      byCustomer[customerId] = [];\n    }\n\n    if (!totalPointsByCustomer[customerId]) {\n      totalPointsByCustomer[customerName] = 0;\n    }\nconsole.log(totalPointsByCustomer[customerName], points);\n    totalPointsByCustomer[customerName] += points;\n\n    if (byCustomer[customerId][month]) {\n      byCustomer[customerId][month].points += points;\n      byCustomer[customerId][month].monthNumber = month;\n      byCustomer[customerId][month].numTransactions++;\n    }\n    else {\n      byCustomer[customerId][month] = {\n        customerId,\n        customerName,\n        monthNumber: month,\n        month: months[month],\n        numTransactions: 1,\n        points\n      }\n    }\n  });\n\n  let total = [];\n  for (var custKey in byCustomer) {\n    byCustomer[custKey].forEach(cRow => {\n      total.push(cRow);\n    });\n  }\n\n  let totalCustomerSpent = [];\n  for (custKey in totalPointsByCustomer) {\n    totalCustomerSpent.push({\n      customerName: custKey,\n      points: totalPointsByCustomer[custKey]\n    });\n  }\n\n  return {\n    summaryByCustomer: total,\n    transactionPoints,\n    totalPointsByCustomer: totalCustomerSpent\n  };\n}\n\nconst columns = [\n  {\n    Header: 'Customer Name',\n    accessor: 'customerName'\n  },\n  {\n    Header: 'Transaction Month',\n    accessor: 'month'\n  },\n  {\n    Header: \"No of Transactions\",\n    accessor: 'numTransactions'\n  },\n  {\n    Header: 'Reward Points',\n    accessor: 'points'\n  }\n];\n\nconst pointsColumn = [\n  {\n    Header: 'Customer Name',\n    accessor: 'customerName'\n  },\n  {\n    Header: 'Total Reward Points',\n    accessor: 'points'\n  }\n];\n\nfunction App() {\n  const [transactionData, setTransactionData] = useState([]);\n  const [customrData, setCustomerData] = useState([]);\n  const firstTable = useTable({\n    columns,\n    data: transactionData,\n  })\n\n  const secondTable = useTable({\n    columns: pointsColumn,\n    data: customrData,\n  })\n\n  useEffect(() => {\n    fetch().then((data) => {\n      const results = calculateRewardPoints(data);\n      setTransactionData(results.summaryByCustomer);\n      setCustomerData(results.totalPointsByCustomer)\n    });\n  }, []);\n\n  if (transactionData == null) {\n    return <div>Empty Data</div>;\n  }\n\n  return (<div>\n    <div className=\"container\">\n      <div className=\"row\">\n        <div className=\"col-10\">\n          <h2 className=\"Header\">Customer Total points by Month</h2>\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"col-8\">\n          <table {...firstTable.getTableProps()}>\n            <thead>\n              {firstTable.headerGroups.map(headerGroup => (\n                <tr {...headerGroup.getHeaderGroupProps()}>\n                  {headerGroup.headers.map(column => (\n                    <th {...column.getHeaderProps()}>{column.render('Header')}</th>\n                  ))}\n                </tr>\n              ))}\n            </thead>\n            <tbody {...firstTable.getTableBodyProps()}>\n              {firstTable.rows.map((row, i) => {\n                firstTable.prepareRow(row)\n                return (\n                  <tr {...row.getRowProps()}>\n                    {row.cells.map(cell => {\n                      return <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\n                    })}\n                  </tr>\n                )\n              })}\n            </tbody>\n          </table>\n        </div>\n      </div>\n    </div>\n\n    <div className=\"container\">\n      <div className=\"row\">\n        <div className=\"col-10\">\n          <h2>Total Points Earned By Customer</h2>\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"col-8\">\n          <table {...secondTable.getTableProps()}>\n            <thead>\n              {secondTable.headerGroups.map(headerGroup => (\n                <tr {...headerGroup.getHeaderGroupProps()}>\n                  {headerGroup.headers.map(column => (\n                    <th {...column.getHeaderProps()}>{column.render('Header')}</th>\n                  ))}\n                </tr>\n              ))}\n            </thead>\n            <tbody {...secondTable.getTableBodyProps()}>\n              {secondTable.rows.map((row, i) => {\n                secondTable.prepareRow(row)\n                return (\n                  <tr {...row.getRowProps()}>\n                    {row.cells.map(cell => {\n                      return <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\n                    })}\n                  </tr>\n                )\n              })}\n            </tbody>\n          </table>\n        </div>\n      </div>\n    </div>\n  </div>\n  );\n}\n\nexport default App;","D:\\react-project\\new-react-project\\src\\reportWebVitals.js",[],"D:\\react-project\\new-react-project\\src\\mockData\\mockCustomerData.js",["24"],"export default function() {\r\n    return Promise.resolve(\r\n      [\r\n          {\r\n            customerId: 1,\r\n            customerName: \"Elon\",\r\n            amountSpent: 125,\r\n            transctionDate: \"06-01-2020\"\r\n          },\r\n          {\r\n            customerId: 1,\r\n            customerName: \"Elon\",\r\n            amountSpent: 125,\r\n            transctionDate: \"07-21-2020\"\r\n          },\r\n          {\r\n            customerId: 1,\r\n            customerName: \"Elon\",\r\n            amountSpent: 125,\r\n            transctionDate: \"08-21-2020\"\r\n          },\r\n          {\r\n            customerId: 1,\r\n            customerName: \"Elon\",\r\n            amountSpent: 125,\r\n            transctionDate: \"08-25-2020\"\r\n          },\r\n          {\r\n            customerId: 1,\r\n            customerName: \"Elon\",\r\n            amountSpent: 125,\r\n            transctionDate: \"09-21-2020\"\r\n          },\r\n          {\r\n            customerId: 1,\r\n            customerName: \"Elon\",\r\n            amountSpent: 125,\r\n            transctionDate: \"09-27-2020\"\r\n          },\r\n          {\r\n            customerId: 1,\r\n            customerName: \"Elon\",\r\n            amountSpent: 125,\r\n            transctionDate: \"11-04-2020\"\r\n          },\r\n          {\r\n            customerId: 1,\r\n            customerName: \"Elon\",\r\n            amountSpent: 125,\r\n            transctionDate: \"11-06-2020\"\r\n          },\r\n          {\r\n            customerId: 1,\r\n            customerName: \"Elon\",\r\n            amountSpent: 125,\r\n            transctionDate: \"11-21-2020\"\r\n          },\r\n          {\r\n            customerId: 2,\r\n            customerName: \"Jeff\",\r\n            amountSpent: 125,\r\n            transctionDate: \"02-01-2020\"\r\n          },\r\n          {\r\n            customerId: 2,\r\n            customerName: \"Jeff\",\r\n            amountSpent: 75,\r\n            transctionDate: \"05-21-2020\"\r\n          },\r\n          {\r\n            customerId: 2,\r\n            customerName: \"Jeff\",\r\n            amountSpent: 10,\r\n            transctionDate: \"06-01-2020\"\r\n          },\r\n          {\r\n            customerId: 2,\r\n            customerName: \"Jeff\",\r\n            amountSpent: 75,\r\n            transctionDate: \"06-21-2020\"\r\n          },\r\n          {\r\n            customerId: 2,\r\n            customerName: \"Jeff\",\r\n            amountSpent: 200,\r\n            transctionDate: \"07-01-2020\"\r\n          },\r\n          {\r\n            customerId: 2,\r\n            customerName: \"Jeff\",\r\n            amountSpent: 224,\r\n            transctionDate: \"07-21-2020\"\r\n          },\r\n          {\r\n            customerId: 3,\r\n            customerName: \"Richard\",\r\n            amountSpent: 120,\r\n            transctionDate: \"03-21-2020\"\r\n          },\r\n          {\r\n            customerId: 3,\r\n            customerName: \"Richard\",\r\n            amountSpent: 120,\r\n            transctionDate: \"04-22-2020\"\r\n          },\r\n          {\r\n            customerId: 3,\r\n            customerName: \"Richard\",\r\n            amountSpent: 320,\r\n            transctionDate: \"05-22-2020\"\r\n          }\r\n      ]\r\n    );\r\n  };",{"ruleId":"25","replacedBy":"26"},{"ruleId":"27","replacedBy":"28"},{"ruleId":"29","severity":1,"message":"30","line":5,"column":8,"nodeType":"31","messageId":"32","endLine":5,"endColumn":9},{"ruleId":"33","severity":1,"message":"34","line":1,"column":1,"nodeType":"35","endLine":114,"endColumn":4},"no-native-reassign",["36"],"no-negated-in-lhs",["37"],"no-unused-vars","'_' is defined but never used.","Identifier","unusedVar","import/no-anonymous-default-export","Unexpected default export of anonymous function","ExportDefaultDeclaration","no-global-assign","no-unsafe-negation"]